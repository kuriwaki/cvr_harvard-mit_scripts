---
title: "CVR Overlap: Presidential Vote"
author: "Shiro Kuriwaki"
date: today
format: 
  html:
    self-contained: true
execute:
  echo: false
---

```{r}
#| include: false
library(tidyverse)
library(plotly)
library(urbnmapr) 
library(gt) 
library(scales) 
```


```{r}

dat_dv <- read_csv("~/Dropbox/CVR_ticketsplit/data/validation/by-county_totals.csv", show_col_types = FALSE) |> 
  select(-state, -county_name) |> 
  rename(nRD_dv = nRD, totalvotes_dv = totalvotes)

comp <- read_csv("data-harvard/release/president-counts.csv", show_col_types = FALSE) |> 
  left_join(dat_dv, by = c("st", "county_fips"))
```



```{r}
match_info <- comp |> 
  transmute(
    st,
    county_fips,
    match = case_when(
      !is.na(n_harvard) & !is.na(n_medsl) ~ "Both",
      !is.na(n_harvard) & is.na(n_medsl) ~ "Only in Harvard",
      is.na(n_harvard) & !is.na(n_medsl) ~ "Only in MEDSL",
    )
  )

suppressMessages(
  {
    state_map <- get_urbn_map("states", sf = TRUE) |> 
      rename(st = state_abbv) 
    
    county_map <- read_rds("data-val/county-statewide_map.rds") |> 
      left_join(match_info, by = c("county_fips", "st"))
  })

```

In this document / dashboard, I compare the degree of overlap between the Snyder, Lewis, Kuriwaki et al. CVR database (henceforth the "Harvard" data) with the MEDSL database. This report is a HTML file: the maps can be zoomed in and hovered over. The tables can be sorted and searched.

We are starting only with the Presidential vote in the 2020 General election. The Harvard database is still quite scattered across coauthors, so I went through and tried to standardize the format across JSON and non-JSON datasets. 
Mason Reece provided a count of the Presidential candidates in the MEDSL side. I have not yet accessed the ballot-level data they have.


# Map 

This map shows the counties where we and MEDSL have data for the Presidential vote. (You can hover over counties to see the names. You may need to download the file as html and open the local file in your browser to see the full legend). 

```{r}
suppressMessages({
gg_sf <- ggplot(county_map, aes(text = county_disp)) +
  geom_sf(data = state_map, linewidth = 0.5, inherit.aes = FALSE, fill = "transparent")  +
  geom_sf(aes(fill = match), linewidth = 0.1)  +
  ggthemes::theme_map() +
  wacolors::scale_fill_wa_d(na.value = "transparent") +
  labs(fill = NULL,
       title = "Data Availability (2020 Presidential)") 


ggplotly(gg_sf, tooltip = "text")
}
)
```

There are **`r sum(county_map$match == "Both", na.rm = TRUE)`** counties[^1] in `r n_distinct(comp$state, na.rm = TRUE)` states where both teams have standardized data, at least at the presidential level.  Separately, there are **`r sum(county_map$match == "Only in Harvard", na.rm = TRUE)`** counties where Harvard but not MEDSL has standardized data. There are **`r sum(county_map$match == "Only in MEDSL", na.rm = TRUE)`** counties where MEDSL but not Harvard has collected data (Note: Jim is close to done with a few of these, including Broward, FL). The union of the counties captured by either Harvard and MEDSL cover around **`r scales::number(sum(comp$nRD_cnn, na.rm = TRUE), scale = 1e-6, suffix = " million")`** presidential votes.

[^1]: I am counting Alasaka, DC, Delaware and Rhode Island as one "county" and one state, because either Harvard/MEDSL has statewide data for these states without county identifiers. And Alaska does not have counties. For the purposes of counting quickly here, I am counting as states.


# Table Version


The tables here compare the counts of votes recorded with each other. 

* I counted the number of valid votes for _Trump or Biden_ in each county. In other words, I ignore undervotes and third party votes. The Harvard/MEDSL data does record more detail such as undervotes, but I wanted to first focus on these offices.
* `N (Harvard)` is the number of Trump + Biden votes tabulated from the Harvard side dataset.
* `N (MEDSL)` is the same number I received from the MIT side.
* `N (CNN)` is the "validation" I am currently using. It is what CNN posted at the end of the 2020 election and can be considered more or less the final count. Jeff Lewis scraped and cleaned this dataset. 


```{r}
use_tbl <- comp |> 
  select(State = st, County = county_name, matches("nRD")) |> 
  select(-nRD_dv) |> 
  mutate(County = str_to_title(County)) |> 
  rename(`N (Harvard)` = nRD_harvard,
         `N (MEDSL)` = nRD_medsl,
         `N (CNN)` = nRD_cnn)

use_tbl |> 
  gt(caption = "Number of Trump + Biden Votes") |> 
  tab_spanner(label = "Biden + Trump votes", columns = 3:5) |> 
  fmt_integer() |> 
  sub_missing() |> 
  cols_width(State ~ px(70)) |> 
  opt_interactive(use_filters = TRUE)
```


# Discrepancies: Overcounting

```{r}
diff_tbl <- use_tbl |> 
  filter(!is.na(`N (Harvard)`) & !is.na(`N (MEDSL)`)) |> 
  mutate(diff1 = abs(`N (Harvard)` - `N (MEDSL)`),
         diff2 = abs(`N (Harvard)` - `N (CNN)`),
         diff3 = abs(`N (MEDSL)` - `N (CNN)`))

```

We see that some of these appear to be double-counting rows, with about five counties having ratios of close to 1. After the first 15 or so counties in this row, however, the discrepancies are very small or 0.
 

```{r}
diff_tbl |> 
  filter(diff1 > 0) |> 
  mutate(diff_ratio = diff1/`N (CNN)`) |> 
  arrange(desc(diff_ratio)) |> 
  select(1:5, `H-M Discrep.` = diff1, `Ratio` = diff_ratio) |> 
  gt() |> 
  tab_spanner(label = "Biden + Trump votes", columns = 3:5) |> 
  fmt_number(columns = Ratio) |> 
  fmt_integer(columns = 3:6) |> 
  sub_missing() |> 
  cols_width(State ~ px(70)) |>
  opt_interactive(use_filters = TRUE)
```

Overall, in this data of `r nrow(diff_tbl)` counties where we both have data, `r percent(mean(diff_tbl$diff1 != 0))` of the counties  have some disagreement.  Many of the disagreements appear to be in 2x or 3x of the CNN number, suggesting double-counting. 


# Discrepancies: Harvard vs. MEDSL

Which team is more correct? Here I only check whether the D + R vote total _exactly_ matches the CNN count.[^2] Of course, the CNN count may not be the final validated result, but this is a first pass.  I only look at the counties where both teams have data.

[^2]:  I also took county-level presidential vote data from MEDSL's Dataverse and used it as another potential number it can match to (this only increases the number of exact matches by a handful as of 2023 Nov).

```{r}
comp_match <- comp |> 
  filter(!is.na(nRD_harvard), !is.na(nRD_medsl)) |> 
  transmute(
    county_fips,
    match = case_when(
      (nRD_harvard == nRD_cnn) & (nRD_medsl == nRD_cnn) ~ "Both Correct",
      (nRD_harvard == nRD_cnn) & (nRD_medsl != nRD_cnn) ~ "Only Harvard Correct",
      (nRD_harvard != nRD_cnn) & (nRD_medsl == nRD_cnn) ~ "Only MEDSL Correct",
        (nRD_harvard != nRD_cnn) & (nRD_medsl != nRD_cnn) ~ "Neither Correct"
    )
  ) |> 
  mutate(match = fct_relevel(match, "Both Correct", "Only Harvard Correct", "Only MEDSL Correct"))

suppressMessages({
gg_sf <- county_map |> 
  select(-match) |> 
  left_join(comp_match, by = "county_fips") |> 
  ggplot(aes(text = county_disp)) +
  geom_sf(data = state_map, linewidth = 0.5, inherit.aes = FALSE, fill = "transparent")  +
  geom_sf(aes(fill = match), linewidth = 0.1)  +
  ggthemes::theme_map() +
  wacolors::scale_fill_wa_d(na.value = "transparent", palette = "uw") +
  labs(fill = NULL,
       title = "Exact Match with CNN Count (2020 Presidential)")


ggplotly(gg_sf, tooltip = "text")
})
```


Of these `r nrow(comp_match)` counties, **`r sum(comp_match$match == "Both Correct", na.rm = TRUE)`** are both exactly matching, **`r sum(comp_match$match == "Only Harvard Correct", na.rm = TRUE)`** are where only the Harvard Team is exactly matching, and **`r sum(comp_match$match == "Only MEDSL Correct", na.rm = TRUE)`** counties are where only the MIT team is exactly matching. 


# Discrepancies: Insufficient Coverage

Having a count number far above the actual vote count looks like one of the more easier things to fix: we were probably double counting ballot fragments. Something that is harder to fix is when we are _under_ counting.  This might happen when, for example, the CVRs only include in-person votes. 

In this table, we show _only_ counties where our count (either Harvard or MIT, whichever is higher) has a Trump + Biden vote count that is _smaller_ than the CNN vote count. `Fraction` is the fraction of our count relative to the CNN count. For example, if MEDSL = 100, Harvard = 80, and CNN = 120, the ratio is max(100, 80) / 120 = 0.83.

```{r}
frac_tbl <- use_tbl |> 
  select(1:5) |> 
  mutate(Fraction = pmax(`N (Harvard)`, `N (MEDSL)`, na.rm = TRUE) / `N (CNN)`) |> 
  arrange(Fraction) 


frac_tbl |> 
  filter(Fraction < 1) |> 
  gt() |> 
  fmt_number(columns = Fraction, decimals = 3) |> 
  fmt_integer(columns = 3:5) |> 
  sub_missing() |> 
  cols_width(State ~ px(70)) |>
  opt_interactive(use_filters = TRUE)
```



In this data of `r nrow(frac_tbl)` counties, `r percent(mean(frac_tbl$Fraction < 1, na.rm = TRUE))` of the rows have a fraction value less than one, suggesting at least some lack of coverage in both team's data. And `r percent(mean(frac_tbl$Fraction < 0.95, na.rm = TRUE))` of the rows have a fraction value less than 0.95. And `r percent(mean(frac_tbl$Fraction < 0.5, na.rm = TRUE))` of the rows have a fraction value less than 0.5. 

